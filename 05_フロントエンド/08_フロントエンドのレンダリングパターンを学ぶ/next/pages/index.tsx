import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import { useCallback, useEffect, useRef, useState } from "react"
import styles from '../styles/Home.module.css'


const Home: NextPage = () => {
  const [count, handleCountClick] = useCounter();
  const { current, handleFlagClick } = usePrevious(count);

  const handleClick = useCallback(() => {
    handleFlagClick();
    handleCountClick();
  }, [handleCountClick, handleFlagClick]);
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="https://nextjs.org">Next.js!</a>
        </h1>

        <p className={styles.description}>
          Get started by editing{' '}
          <code className={styles.code}>pages/index.tsx</code>
        </p>

        <div className={styles.grid}>
          <a href="https://nextjs.org/docs" className={styles.card}>
            <h2>Documentation &rarr;</h2>
            <p>Find in-depth information about Next.js features and API.</p>
          </a>

          <a href="https://nextjs.org/learn" className={styles.card}>
            <h2>Learn &rarr;</h2>
            <p>Learn about Next.js in an interactive course with quizzes!</p>
          </a>

          <a
            href="https://github.com/vercel/next.js/tree/canary/examples"
            className={styles.card}
          >
            <h2>Examples &rarr;</h2>
            <p>Discover and deploy boilerplate example Next.js projects.</p>
          </a>

          <a
            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
          >
            <h2>Deploy &rarr;</h2>
            <p>
              Instantly deploy your Next.js site to a public URL with Vercel.
            </p>
          </a>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>

      <h1>Hello CodeSandbox</h1>
      <h2>Start editing to see some magic happen!</h2>
      <button onClick={handleClick}>レンダリング！</button>
      <SomeComponent  current={current} />
      <FetchComponent />

    </div>
  )
}

const SomeComponent = ({ current }:{current: number}) => (
    <p>
      ここに、このコンポーネントがレンダリングされた回数を表示してみよう!
      {current}回
    </p>
);

const FetchComponent = () => {
  const { data, error } = useFetch(
    "https://api.github.com/repos/facebook/react",
    {}
  );

  return (
    <div>
      <p>ここにReactのGitHubレポジトリに付いたスターの数を表示してみよう</p>
      <p>{data.stars} stars</p>
    </div>
  );
};

function useCounter() {
  const [count, setCount] = useState<number>(0);
  const handleCountClick = useCallback(() => {
    setCount((prev) => prev + 1);
  }, []);

  return [count, handleCountClick];
}


function usePrevious(value: any) {
  const [flag, setFlag] = useState<boolean>(false);
  const ref = useRef(0);

  const handleFlagClick = useCallback(() => {
    setFlag((flag) => !flag);
  }, []);

  useEffect(() => {
    if (flag) {
      return (ref.current = value);
    }
  }, [value, flag]);
  return {
    current: ref.current,
    handleFlagClick: handleFlagClick
  };
}

const useFetch = (url: string, options: {}) => {
  const [data, setData] = useState({
    subscribers: 0,
    stars: 0
  });

  const [error, setError] = useState(null);

  useEffect(() => {
    const abortController = new AbortController();
    const signal = abortController.signal;

    const fetchData = async () => {
      try {
        const res = await fetch(url, { ...options, signal });
        const response = await res.json();
        const { watchers, subscribers_count } = response;
        setData({
          subscribers: subscribers_count,
          stars: watchers
        });
      } catch (error: any) {
        setError(error);
      }
    };
    fetchData();
    return () => {
      abortController.abort();
    };
  }, []);

  return { data, error };
};

export default Home
