# Think of modeling

## get data
- users
    - id
    - name
    - email
    - content
    - img

# users:workspaces = N:N
# need to create table...
- user_detail
    - user_id
    - can_edit
    - workspace_id

- workspaces
    - id

- channels
    - id

- messages
    - id
    - user_id
    - channel_id
    - content
    - create
    - update
    - delete

# 非正規化のパターン
# - messages
#     - id
#     - userid
#     - channelid
#     - parentid
#     - content
#     - create
#     - update
#     - delete

# 不要だと気づいた
# - shreadmessages
#     - id
#     - userid
#     - messageid
#     - content
#     - create
#     - update
#     - delete

メッセージ
    - 誰が、
    - どのチャネルに、
    - いつ、
    - どんな内容を投稿したのか分かること
スレッドメッセージ ( ２階層以上ではないので、親子構造へ
    - 誰が、
    - どのメッセージに、
    - いつ、
    - どんな内容をスレッドとして投稿したのか分かること
チャネル
    そのチャネルに所属しているユーザにしか、
    メッセージ・スレッドメッセージが見えないこと
ユーザ
- ワークスペースに参加・脱退できること
- チャネルに参加・脱退できること

横断機能
- メッセージとスレッドメッセージを横断的に検索できること（例えば「hoge」と検索したら、この文字列を含むメッセージとスレッドメッセージを両方とも取得できること）
- 参加していないチャネルのメッセージ・スレッドメッセージは検索できないこと
- 中間テーブルは名称と名称をつなげる
- 中間テーブル(user_channel)が列が存在すると、チャンネルにユーザの存在表明できる

- フレームワークから独立したDBにしないことがいいこともある